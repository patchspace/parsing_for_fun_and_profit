# Completed List grammar that passes all specs

module ParsingForFunAndProfit
  module List
    grammar List
      rule maybe_a_list
        list
        /
        not_a_list
      end

      rule list
        (
          empty_list
          /
          list_with_elements
        ) {
          def list_value
            to_list
          end
        }
      end

      rule empty_list
        "[" blank "]" {
          def to_list
            [ ]
          end
        }
      end

      rule list_with_elements
        "[" blank list_items blank "]" {
          def to_list
            list_items.to_list
          end
        }
      end

      rule list_items
        first:list_item rest:(blank "," blank next:list_item)* {
          def to_list
            [first.list_value] + rest.elements.map { |element| element.next.list_value }
          end
        }
      end

      rule list_item
        symbol
        /
        list
      end

      rule symbol
        [a-z] {
          def list_value
            text_value.to_sym
          end
        }
      end

      rule blank
        " "*
      end

      rule not_a_list
        "" {
          def to_list
            :nothing
          end
        }
      end
    end
  end
end